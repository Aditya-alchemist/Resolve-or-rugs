# Overview

"Resolve or Rug?" is a mobile-first prediction market education game featuring Deek (a monkey mascot) that teaches users to identify legitimate prediction markets versus "rug pulls" (scam markets). Players swipe through market scenarios, learn from feedback, and compete for high scores while developing critical thinking skills about prediction market quality and legitimacy.

The application is a full-stack web game built with React and Express, featuring swipe-based gameplay similar to Tinder, educational content delivery, and gamification elements including scoring, streaks, and social sharing capabilities.

# User Preferences

Preferred communication style: Simple, everyday language.

# System Architecture

## Frontend Architecture
- **React 18** with TypeScript for the main application framework
- **Vite** as the build tool and development server with hot module replacement
- **Wouter** for lightweight client-side routing (Home, Game, NotFound pages)
- **Framer Motion** for smooth animations and swipe gesture handling
- **TanStack Query** for server state management and caching
- **Tailwind CSS** with custom design system following gaming aesthetics
- **Shadcn/ui** component library for consistent UI elements

## Component Structure
- **SwipeGame**: Main game logic managing questions, scoring, and game flow
- **MarketCard**: Swipeable cards displaying market scenarios with drag gestures
- **DeekAvatar**: Animated mascot that reacts to player performance
- **FeedbackModal**: Educational explanations after each answer
- **BragScreen**: End-game celebration and social sharing interface
- **ScoreDisplay**: Real-time progress tracking and statistics

## Backend Architecture
- **Express.js** server with TypeScript for API endpoints
- **Drizzle ORM** configured for PostgreSQL database operations
- **Session-based storage** using connect-pg-simple for user persistence
- **Memory storage** implementation as fallback for development
- **Modular route registration** system for scalable API expansion

## Design System
- **Color Palette**: Purple primary (#7C3AED), green success, red error themes
- **Typography**: Inter for readability, Fredoka One for playful elements  
- **Layout**: Mobile-first responsive design with touch-optimized interactions
- **Animations**: 300ms ease-out transitions for smooth user experience
- **Component Library**: Consistent spacing (4/6/8/12px) and elevation patterns

## Game Logic
- **Question Bank**: Hardcoded market scenarios with categories, difficulty levels, and explanations
- **Scoring System**: Points awarded based on correct answers and streak multipliers
- **Progress Tracking**: Real-time accuracy calculation and completion percentage
- **Educational Feedback**: Detailed explanations for each market scenario outcome

# External Dependencies

## Database
- **Neon Database** (PostgreSQL) - Cloud-hosted database service
- **Drizzle ORM** - Type-safe database operations and migrations
- **connect-pg-simple** - PostgreSQL session store for Express

## UI Framework  
- **Radix UI** - Accessible primitive components for modals, tooltips, forms
- **Shadcn/ui** - Pre-built component library with consistent styling
- **Framer Motion** - Animation library for smooth transitions and gestures
- **Tailwind CSS** - Utility-first CSS framework with custom design tokens

## Development Tools
- **Vite** - Fast development server and build tool
- **TypeScript** - Type safety across frontend and backend
- **ESBuild** - Fast JavaScript bundler for production builds
- **Replit Integration** - Development environment compatibility

## Fonts & Assets
- **Google Fonts** - Inter and Fredoka One typography
- **Custom Assets** - Deek mascot images and game graphics stored in attached_assets
- **Lucide React** - Icon library for UI elements

## Deployment
- **Node.js** runtime environment
- **Express** static file serving for production builds
- **Environment Variables** - DATABASE_URL configuration for database connection